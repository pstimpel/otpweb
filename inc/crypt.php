<?php
/*
 * https://stackoverflow.com/questions/2604435/fatal-error-call-to-undefined-function-mcrypt-encrypt
 *
 * Step-1: Download a suitable version for your system from here: https://pecl.php.net/package/mcrypt/1.0.3/windows

Step-2: Unzip and copy php_mcrypt.dll file to ../xampp/php/ext/

Step-3: Open ../xampp/php/php.ini file and add a line extension=php_mcrypt.dll

Step-4: Restart apache, DONE!

------------------>Not used, deprecated in php7.1, using openssl now


 * */


class Crypt
{


    /**
     * Creates a cryptographically secure initialization vector (IV).
     *
     * This method creates a cryptographically secure initialization vector (IV) by generating random bytes using the OpenSSL library.
     * It uses the 'aes-256-cbc' cipher method to determine the length of the bytes to generate.
     * The method attempts to generate a cryptographically secure IV up to a maximum number of attempts specified by the $maxAttempts parameter.
     * If the maximum number of attempts is reached and a cryptographically secure IV couldn't be generated, the method returns null.
     *
     * @return string The generated cryptographically secure initialization vector (IV) if successful, or a weaker one if it was failing 3 times to generate a strong one
     *
     * @see generateBytes()
     *
     */
    public static function createIV(): string
    {
        $maxAttempts = 3;
        $attempts = 0;

        do {
            $ivDetails = self::generateBytes();
            $attempts++;
        } while (!$ivDetails['strong'] && $attempts < $maxAttempts);

        //return the IV, even it is cryptographically week
        return $ivDetails['iv'];
    }

    /**
     * Generates a set of random bytes.
     *
     * This method generates a set of random bytes using the OpenSSL library.
     * It uses the 'aes-256-cbc' cipher method to determine the length of the bytes to generate.
     *
     * @return array An array containing the generated bytes and the strength of the random number generator.
     *               The array has the following structure:
     *               - strong (bool): A boolean value indicating whether the random number generator used was strong or not.
     *               - iv (string): The generated random bytes in the form of an initialization vector (IV).
     */
    private static function generateBytes(): array
    {
        $strong = false;
        $iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length('aes-256-cbc'), $strong);
        return [
            'strong' => $strong,
            'iv' => $iv,
        ];
    }


    /**
     * Enrypt a value
     *
     * @param string $data The data to encrypt
     * @param string $passwordHash_sha256 The string of bytes representing the sha256 hashed password
     * @param string $iv The string of bytes representing the IV
     *
     * @return string the encrypted string, base64 encoded
     */
    public static function encrypt_base64(string $data, string $passwordHash_sha256, string $iv): string
    {
        //base64 encoded return value
        return openssl_encrypt($data, 'aes-256-cbc', $passwordHash_sha256, 0, $iv);
    }


    /**
     * Decrypts the given data using AES-256-CBC encryption algorithm.
     *
     * @param string $encryptedData_base64 The encrypted data in base64 encoding.
     * @param string $passwordHash_sha256 The SHA256 hash of the password used for decryption.
     * @param string $iv The initialization vector used for encryption.
     *
     * @return string|null The decrypted data, or null if decryption fails.
     */
    public static function decrypt(string $encryptedData_base64, string $passwordHash_sha256, string $iv): ?string
    {
        $decryptionResult = openssl_decrypt($encryptedData_base64, 'aes-256-cbc', $passwordHash_sha256, 0, $iv);
        if ($decryptionResult === false) {
            // Decryption failed. Return null.
            return null;
        }
        return $decryptionResult;
    }

}